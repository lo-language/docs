/**
 * Another interview question solution.
 *
 * Created by: spurcell
 * 2/8/15
 */

dict is {
    "hi","high","land","highland","highlander","the","there","can","be","only","one","on","here","and","an"
};

main is <-> (args, system) {

    findWords << ("therecanbeonlyonehighlander", system.err.write) -> (result) {
        system.out.write("success! found `result`\n");
    }
    on fail -> {
        system.out.write("I was not set up for success\n");
        fail;
    };
};

findWords is <-> (s, log) {

    // base case
    if dict has s {
        reply [s];
    }
    
    length = #s;

    i = 0;

    while i < length {

        // strings are just arrays
        word = s[0..i];

        if dict has word {

            // log("FOUND `word`\n");

            // we need to use the message form to switch on the result because findWords can fail;
            // the expression form of the request would be undefined in that case
            // on failure we just keep chugging; on success we return
            
            findWords << (s[i+1..], log) -> (following) {
                reply [word] >< following;
            };
        }

        i++;
    }

    // we seem to have run out of string
    fail;
};


