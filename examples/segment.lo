/**
 * Another interview question solution.
 *
 * Created by: spurcell
 * 2/8/15
 */

dict is {
    "hi","high","land","highland","highlander","the","there","can","be","only","one","on","here","and","an"
};

main is <-> (args, system) {

    findWords("therecanbeonlyonehighlander", system.err.write) -> (result) {
        system.out.write("success! found `result`\n");
    }
    on fail -> {
        system.out.write("I was not set up for success\n");
        fail;
    }
};

findWords is <-> (s, log) {

    length = #s;

//    log("`s`, `length`\n");

    i = 0;

    while i < length {

        word = s[0..i];

//        log("`word`, `i`\n");

        if dict contains word {

            log("FOUND `word`\n");

            // base case
            if i == length - 1 {
                reply [word];
            }

            // we need to use the handler form because findWords can fail;
            // the expression form of the request would be undefined in that case
            findWords(s[i+1..], log) -> (following) {
                reply [word] >< following;
            }
        }

        i++;
    }

    // we seem to have run out of string
    fail;
};


